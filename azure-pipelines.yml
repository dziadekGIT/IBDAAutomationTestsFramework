pr:
  branches:
    include:
      - main
  paths:
    exclude:
      - docs/**
      - README.md

pool:
  vmImage: 'ubuntu-latest'

variables:
  dockerImageName: 'ibda-tests'
  # dockerImageTag: '$(Build.BuildNumber)'  # Usuń tę linię

steps:
- task: Checkout@1
  displayName: 'Checkout repository'

# Debug step to check Dockerfile location
- script: |
    find . -name Dockerfile
  displayName: 'Locate Dockerfile'

# Debug step to check Docker variables
- script: |
    echo "Docker Image Name: $(dockerImageName)"
    echo "Build ID: $(Build.BuildId)"
    echo "Build Number: $(Build.BuildNumber)"
  displayName: 'Debug Variables'

# Check if TEST_OPERATORIBDA_PASSWORD is set
- script: |
    if [ -z "$(TEST_OPERATORIBDA_PASSWORD)" ]; then
      echo "TEST_OPERATORIBDA_PASSWORD is not set"
      exit 1
    else
      echo "TEST_OPERATORIBDA_PASSWORD is set"
    fi
  displayName: 'Check TEST_OPERATORIBDA_PASSWORD'

# Build Docker Image
- task: Docker@2
  displayName: 'Build Docker Image'
  inputs:
    command: 'build'
    Dockerfile: '**/Dockerfile'
    tags: |
      $(dockerImageName):$(Build.BuildNumber)
      $(dockerImageName):latest

# List Docker images to ensure build was successful
- script: |
    docker images
  displayName: 'List Docker Images'

# Save Docker Image as TAR
- script: |
    docker save $(dockerImageName):$(Build.BuildNumber) -o ibda-tests.tar
  displayName: 'Save Docker Image as TAR'

# Check if tar file exists
- script: |
    if [ ! -f ibda-tests.tar ]; then
      echo "Docker image tar file not found!"
      exit 1
    else
      echo "Docker image tar file exists."
    fi
  displayName: 'Check ibda-tests.tar Exists'

# Debug credentials (opcjonalnie)
- script: |
    echo "TEST_OPERATORIBDA_PASSWORD=$(TEST_OPERATORIBDA_PASSWORD)"
  displayName: 'Debug credentials'

# Publish Docker Image as Artifact
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: 'ibda-tests.tar'
    artifact: 'docker-image'
  displayName: 'Publish Docker Image as Artifact'
